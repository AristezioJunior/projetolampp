package com.aristezio.lampp.api.controller;

import java.net.URI;
import java.net.URISyntaxException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aristezio.lampp.domain.model.EncurtadorUrl;
import com.aristezio.lampp.domain.repository.EncurtadorUrlRepository;
import com.aristezio.lampp.domain.service.EncurtadorUrlService;

import jakarta.validation.constraints.NotEmpty;
import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/alias")
public class RecuperarUrlController {

	@Autowired
	EncurtadorUrlRepository repository;
	
	@Autowired
	EncurtadorUrlService service;
	
	@GetMapping("/{codigo}")
	ResponseEntity<Object> redirectToOriginalUrl(@PathVariable @NotEmpty String codigo) throws URISyntaxException {
        EncurtadorUrl encurtadorUrl = service.getUrlByCodigo(codigo);
        URI uri = new URI(encurtadorUrl.getUrlOriginal());
        
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setLocation(uri);
        return ResponseEntity.status(HttpStatus.SEE_OTHER).headers(httpHeaders).build();
//        if (encurtadorUrl.isPresent()) {
//        	EncurtadorUrl url = repository.findByCodigoEquals(codigo);
//            return ResponseEntity.status(HttpStatus.FOUND)
//                    .body(new RedirectView(url.getUrlOriginal()));
//        	
//        } else {
//            ErrorResponse errorResponse = new ErrorResponse("002", "SHORTENED URL NOT FOUND");
//            return ResponseEntity.status(HttpStatus.NOT_FOUND)
//                    .body(errorResponse);
//        }


    }
	
}
